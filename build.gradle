plugins {
	id "java"
	id "org.springframework.boot" version "3.5.4"
	id "io.spring.dependency-management" version "1.1.7"
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

def queryDslVersion = "7.0"
def querydslSrcDir  = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(querydslSrcDir))
}

group = "com.example"
version = "0.0.1-SNAPSHOT"
description = "patient-management-system"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDirs += querydslSrcDir
		}
	}
}

configurations {
	querydsl.extendsFrom compileClasspath
	asciidoctorExt
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "io.github.openfeign.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "io.github.openfeign.querydsl:querydsl-apt:${queryDslVersion}"
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	runtimeOnly "com.h2database:h2"
	compileOnly "org.projectlombok:lombok"
	annotationProcessor "org.projectlombok:lombok"
	annotationProcessor "io.github.openfeign.querydsl:querydsl-apt:${queryDslVersion}:jpa"
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testAnnotationProcessor "org.projectlombok:lombok"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
	baseDirFollowsSourceFile()
}
asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

tasks.named("test") {
	useJUnitPlatform()
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}